manque les logs de django, a voir une fois que garfi aura fini

Dashboard prometheus
alerts

Milestone: Retention Policies Implemented in Elasticsearch

What It Means:

    Retention Policies:
    These are rules you set up to manage how long indices (or data streams) are kept in Elasticsearch. When data gets older than a certain threshold, it can be automatically deleted or moved to a less expensive storage tier.

    Index Lifecycle Management (ILM):
    ILM allows you to define phases for each index:
        Hot Phase: Actively written and queried data.
        Warm Phase: Data that is less frequently updated but still needs to be searchable.
        Cold Phase: Data that is infrequently accessed.
        Delete Phase: Data that has reached the end of its lifecycle and can be safely deleted.

Key Tasks:

    Define an ILM Policy:
        In Kibana’s Management section (under Index Lifecycle Policies), create a new policy.
        Specify criteria for rollover (e.g., index age or document count/size).
        Define the retention period by setting a delete phase (e.g., delete indices older than 30 days, 90 days, etc.).

    Apply the Policy to Indices:
        Link the ILM policy to your index templates so that new indices automatically inherit the lifecycle rules.
        Ensure that existing indices can be re-indexed or moved into the new lifecycle management if needed.

    Monitor & Tune:
        Monitor the cluster state to ensure indices are transitioning between phases as expected.
        Adjust the thresholds (time, size, document count) based on your actual log volume and storage requirements.

    Compliance and Storage Optimization:
        Make sure your retention policies align with organizational or legal data retention requirements.
        This setup helps avoid unbounded index growth and keeps storage use efficient.

Testing & Validation:

    Use Kibana’s ILM monitoring to verify that indices are transitioning between phases (hot → warm → delete) as defined.
    Confirm that when the criteria are met (for instance, an index reaches the defined age), the appropriate action (rollover or deletion) is taken.
    Review cluster logs to check for any ILM-related warnings or errors.

By meeting these milestones, you ensure that your logging infrastructure not only provides real-time insights via dashboards but also manages storage effectively through automated data retention.
You said:
Milestone: Retention policies implemented in Elasticsearch.
Milestone: Custom dashboards are available; alerts are configured and tested.

Below are details for the two milestones:
Milestone: Retention Policies Implemented in Elasticsearch

What It Means:

    Retention Policies: Automatically manage the lifespan of your data by defining rules for when data should be rolled over, moved to different storage tiers (if applicable), or deleted.
    Index Lifecycle Management (ILM): Use Elasticsearch’s ILM to define and enforce policies across different phases:
        Hot: Active, frequently updated data.
        Warm/Cold: Data that is less frequently accessed but still searchable.
        Delete: Data that has exceeded its retention period is automatically deleted.

Key Tasks:

    Define an ILM Policy:
        In Kibana’s Management → Index Lifecycle Policies, create a policy that specifies:
            Rollover criteria: e.g., based on age, document count, or index size.
            Transition phases: When to move from hot to warm or cold.
            Deletion phase: When to delete old indices (e.g., after 30, 90, or 365 days).
    Apply the ILM Policy:
        Associate the ILM policy with your index templates so that all new indices automatically inherit the lifecycle rules.
        Optionally, migrate existing indices into ILM if required.
    Monitor & Tune:
        Use Kibana’s ILM monitoring tools to ensure indices transition as expected.
        Adjust thresholds based on observed log volumes and storage capacity.
    Compliance & Optimization:
        Confirm that the policies meet your organization’s data retention requirements and help manage storage costs effectively.

Testing & Validation:

    Confirm that indices roll over, transition, and eventually delete when they meet the defined criteria.
    Check ILM status in Kibana and review cluster logs for ILM-related messages.
    Simulate conditions (if possible) to ensure policies act as expected.

Milestone: Custom Dashboards Are Available; Alerts Are Configured and Tested

What It Means:

    Custom Dashboards: Tailored dashboards in Kibana that aggregate and visualize key metrics and log data relevant to your operational or business needs.
    Alerting: Automated notifications configured to trigger when predefined thresholds or conditions (such as error spikes, latency increases, or specific log patterns) are met.
    Tested Alerts: Verified that alerts fire correctly under simulated conditions and that notifications (e.g., emails, webhooks, Slack messages) are received as expected.

Key Tasks:

    Dashboard Creation:
        Identify Metrics: Determine which metrics (e.g., error counts, request latencies, system resource usage) are critical.
        Build Visualizations: Create visualizations (line charts, bar charts, pie charts, heatmaps, etc.) based on these metrics.
        Assemble Dashboards: Combine the visualizations into one or more dashboards that provide a comprehensive view of your system’s health and performance.
    Configure Alerts:
        Define Conditions: Using Kibana Alerting or Watcher, set up conditions that trigger alerts when, for example, log error rates exceed a certain threshold.
        Set Notifications: Configure channels for notifications (email, webhook, Slack, etc.).
        Schedule & Test: Set the alerting schedule and use test events or simulated data to confirm that alerts trigger as designed.
    Testing & Refinement:
        Simulate Events: Manually or programmatically generate data to trigger alert conditions.
        Verify Notification Delivery: Ensure alerts are sent to and received by the intended recipients.
        Iterate: Adjust thresholds and conditions as necessary based on testing feedback.

Testing & Validation:

    Load custom dashboards in Kibana and verify that all visualizations update with real-time data.
    Use Kibana’s built-in alert testing features (or simulate conditions) to verify that alerts trigger.
    Check the notification channels to ensure alerts are received.
    Review alert logs and dashboards for any false positives or missed triggers.

By achieving these milestones, you ensure that your Elasticsearch cluster manages data retention effectively while providing a user-friendly, insightful monitoring solution with robust alerting to help you quickly identify and respond to issues.
