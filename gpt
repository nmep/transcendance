filter {
  if [service] == "auth" {
    grok {
      match => { "message" => "^\s*%{TIME:time},%{INT:ms}\s+%{LOGLEVEL:loglevel}\s+%{DATA:logger}\s+\"%{WORD:verb}\s+%{URIPATHPARAM:request}\s+HTTP\/%{NUMBER:http_version}\"\s+%{INT:status}\s+%{INT:bytes}$" }
    }
  } else if [service] == "elastic" {
    grok {
      match => { "message" => "^\{\"@timestamp\":\"%{TIMESTAMP_ISO8601:json_timestamp}\",\s+\"log\.level\":\s+\"%{LOGLEVEL:log_level}\",\s+\"message\":\"%{DATA:json_message}\",\s+\"ecs\.version\":\s+\"%{DATA:ecs_version}\",\s*\"service\.name\":\s+\"%{DATA:service_name}\",\s+\"event\.dataset\":\s+\"%{DATA:event_dataset}\",\s+\"process\.thread\.name\":\s+\"%{DATA:process_thread}\",\s+\"log\.logger\":\s+\"%{DATA:log_logger}\",\s+\"elasticsearch\.cluster\.uuid\":\s+\"%{DATA:cluster_uuid}\",\s+\"elasticsearch\.node\.id\":\s+\"%{DATA:node_id}\",\s+\"elasticsearch\.node\.name\":\s+\"%{DATA:node_name}\",\s+\"elasticsearch\.cluster\.name\":\s+\"%{DATA:cluster_name}\"\}$" }
    }
  } else if [service] == "grafana" {
    grok {
      match => { "message" => "^logger=%{DATA:logger}\s+t=%{TIMESTAMP_ISO8601:timestamp}\s+level=%{LOGLEVEL:level}\s+msg=%{WORD:msg}\s+first_tick=%{TIMESTAMP_ISO8601:first_tick}$" }
    }
  } else if [service] == "kibana" {
    grok {
      match => { "message" => "^\s*at\s+%{DATA:caller}\s+\(%{DATA:file}:%{NUMBER:line}:%{NUMBER:column}\)$" }
    }
  } else if [service] == "logstash" {
    grok {
      match => { "message" => "^\s*\"@timestamp\"\s*=>\s*%{TIMESTAMP_ISO8601:timestamp},$" }
    }
  } else if [service] == "nginx_exporter" {
    grok {
      match => { "message" => "^time=%{TIMESTAMP_ISO8601:time}\s+level=%{LOGLEVEL:level}\s+source=%{DATA:source}\s+msg=%{DATA:msg}\s+version=%{QUOTEDSTRING:version}$" }
    }
  } else if [service] == "postgres" {
    grok {
      match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp}\s+UTC\s+\[%{INT:pid}\]\s+LOG:\s+\s*checkpoint complete:\s+wrote\s+%{INT:buffers} buffers \(%{NUMBER:buffers_percent}%\);\s+%{INT:wal_added} WAL file\(s\) added,\s+%{INT:wal_removed} removed,\s+%{INT:wal_recycled} recycled;\s+write=%{NUMBER:write_time} s,\s+sync=%{NUMBER:sync_time} s,\s+total=%{NUMBER:total_time} s;\s+sync files=%{INT:sync_files},\s+longest=%{NUMBER:longest_time} s,\s+average=%{NUMBER:avg_time} s;\s+distance=%{INT:distance} kB,\s+estimate=%{INT:estimate} kB;\s+lsn=%{DATA:lsn},\s+redo lsn=%{DATA:redo_lsn}$" }
    }
  } else if ([service] == "postgres_exporter") {
    grok {
      match => { "message" => "^time=%{TIMESTAMP_ISO8601:time}\s+level=%{LOGLEVEL:level}\s+source=%{DATA:source}\s+msg=%{QUOTEDSTRING:msg}\s+server=%{DATA:server}\s+from=%{DATA:from_version}\s+to=%{DATA:to_version}$" }
    }
  } else if [service] == "prometheus" {
    grok {
      match => { "message" => "^time=%{TIMESTAMP_ISO8601:time}\s+level=%{LOGLEVEL:level}\s+source=%{DATA:source}\s+msg=%{QUOTEDSTRING:msg}\s+component=%{DATA:component}$" }
    }
  }
}
